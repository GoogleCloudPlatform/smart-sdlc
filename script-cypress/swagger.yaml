# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

swagger: "2.0"
info:
  title: script-cypress
  version: v1
host: my-host.example.com
schemes:
  - "https"
paths:
  /process:
    post:
      summary: Process the document.
      description: This endpoint receives the input document and sends to VertexAI for Cypress Test Script creation.
      consumes:
        - text/markdown
      produces:
        - text/markdown
      parameters:
        - in: header
          name: API_KEY
          description: API_KEY is the key used to authenticate the API call
          type: string
          required: true
        - in: header
          name: User-Agent
          description: User-Agent is used to identify the caller
          type: string
          default: wiki-interface
          required: true
        - in: body
          name: document
          description: Input Document.
          required: true
          schema:
            type: string
            example: |
              **Test Plan Document**
              
              **User Story:** As a user, I want to be able to create a new account so that I can access the application.
              
              **Test Cases:**
              
              **Test Case 1: Successful Account Creation**
              
              **Step-by-Step Guide:**
              
              1. Open the application.
              2. Click on the "Sign Up" button.
              3. Enter the following information into the registration form:
                  * First Name: [Sample Data: John]
                  * Last Name: [Sample Data: Doe]
                  * Email Address: [Sample Data: username@example.com]
                  * Password: [Sample Data: Password123]
                  * Confirm Password: [Sample Data: Password123]
              4. Click on the "Create Account" button.
              
              **Expected Result:**
              
              * The user account is created successfully.
              * The user is redirected to the login page.
              
              **Test Case 2: Empty Fields**
              
              **Step-by-Step Guide:**
              
              1. Open the application.
              2. Click on the "Sign Up" button.
              3. Leave all the fields in the registration form empty.
              4. Click on the "Create Account" button.
              
              **Expected Result:**
              
              * The user receives an error message indicating that all fields are required.
      responses:
        200:
          description: OK
          schema:
            type: string
            example: |
              ```javascript
              // Import the necessary libraries
              import { expect } from 'chai';
              import { describe, it, before, afterEach } from 'mocha';
              import { createUser } from '../pages/user-page';
              
              // Define the base URL for the application
              const baseUrl = 'http://localhost:3000';
              
              // Define the test data
              const validUserData = {
                firstName: 'John',
                lastName: 'Doe',
                email: 'john.doe@example.com',
                password: 'password',
                confirmPassword: 'password',
                role: 'user',
              };
              
              const invalidUserData = {
                firstName: '',
                lastName: '',
                email: 'invalid email',
                password: 'short',
                confirmPassword: 'not matching',
                role: 'invalid role',
              };
              
              // Define the test cases
              describe('Create User', () => {
                // Visit the application before each test
                before(() => {
                  cy.visit(baseUrl);
                });
              
                // Reset the application after each test
                afterEach(() => {
                  cy.reload();
                });
              
                // Test case 1: Create a user with valid data
                it('should create a user with valid data', () => {
                  // Fill the form with valid data
                  createUser(validUserData);
              
                  // Verify that the user is created successfully
                  cy.contains('User created successfully');
                });
              
                // Test case 2: Create a user with invalid data
                it('should not create a user with invalid data', () => {
                  // Fill the form with invalid data
                  createUser(invalidUserData);
              
                  // Verify that the user is not created
                  cy.contains('User could not be created');
                });
              
              });
              ```
        400:
          description: Bad request
        401:
          description: Access denied
        500:
          description: Internal error